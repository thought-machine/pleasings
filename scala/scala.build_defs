

def scala_library(name:str, srcs:list=None, src_dir:str=None, resources:list=None, resources_root:str=None,
                  deps:list=[], exported_deps:list=None, visibility:list=None,
                  test_only:bool&testonly=False, scalac_flags:list=[], labels:list=[]):

    """Compiles scala source code to a .jar which can be collected by other rules.

  Args:
    name (str): Name of the rule
    srcs (list): scala source files to compile for this library
    src_dir (str): Directory containing scala source files to compile.
    resources (list): Resources to include in the .jar file
    resources_root (str): Root directory to treat resources relative to; ie. if we are in
                          //project/main/resources and resources_root is project/main then
                          the resources in the .jar will be in the subdirectory 'resources'.
    deps (list): Dependencies of this rule.
    exported_deps (list): Exported dependencies, ie. dependencies that other things depending on this
                          rule will also receive when they're compiling. This is quite important for
                          Java; any dependency that forms part of the public API for your classes
                          should be an exported dependency.
    visibility (list): Visibility declaration of this rule.
    test_only (bool): If True, this rule can only be depended on by tests.
    scalac_flags (list): List of flags passed to javac.
    labels (list): Additional labels to apply to this rule.
  """

    if srcs and src_dir:
        raise ParseError('You cannot pass both srcs and src_dir to scala_library')

    if srcs or src_dir:
        if resources:
            res_rule = scala_library(
                name='_%s#res' % name,
                resources=resources,
                resources_root=resources_root,
                test_only=test_only,
            )
            deps.append(res_rule)

        scalac_flags = " ".join(scalac_flags) or ""

        scalac_command = 'mkdir -p _tmp/META-INF && $TOOLS_SCALAC %s -classpath .:%s -d _tmp %s' % (
            scalac_flags,
            r'`find $TMP_DIR -name "*.jar" | tr \\\\n :`',
            '$SRCS_SRCS' if srcs else '`find $SRCS_SRCS -name "*.scala"`',
        )

        cmd = ' && '.join([
            scalac_command,
            'find _tmp -name "*.class" | sed -e "s|_tmp/|${PKG} |g" -e "s/\\.class/.scala/g" | sort > _tmp/META-INF/please_sourcemap',
            'cd _tmp',
            '$TOOLS_JARCAT z -d -o $OUT -i .',
        ])

        deps.append(CONFIG.SCALA_LIBRARY)

        return build_rule(
            name=name,
            srcs={
                "SRCS": srcs or [src_dir],
                "RES": resources
            },
            deps=deps,
            exported_deps=exported_deps,
            outs=[f"{name}.jar"],
            visibility=visibility,
            cmd=cmd,
            building_description="Compiling...",
            requires=['scala'],
            labels = labels,
            test_only=test_only,
            tools={
                'scalac': [CONFIG.SCALAC_TOOL],
                'jarcat': [CONFIG.JARCAT_TOOL],
            },
        )
    elif resources:
        # Can't run scalac since there are no scala files.
        if resources_root:
            cmd = 'cd ${PKG}/%s && $TOOL z -d -o ${OUT} -i .' % resources_root
        else:
            cmd = '$TOOL z -d -o ${OUTS} -i .'
        return build_rule(
            name=name,
            srcs=resources,
            deps=deps,
            exported_deps=exported_deps,
            outs=[name + '.jar'],
            visibility=visibility,
            cmd=cmd,
            building_description="Linking...",
            requires=['java'],
            labels = labels,
            test_only=test_only,
            tools=[CONFIG.JARCAT_TOOL],
        )


def scala_binary(name:str, main_class:str=None, out:str=None, srcs:list=None, deps:list=[],
                 data:list=None, visibility:list=None, self_executable:bool=True,
                 jvm_args:str='', manifest:str=None):
    """Compiles a .jar from a set of scala libraries.

    Args:
      name (str): Name of the rule.
      main_class (str): Main class to set in the manifest.
      out (str): Name of output .jar file. Defaults to name + .jar.
      srcs (list): Source files to compile.
      deps (list): Dependencies of this rule.
      data (list): Runtime data files for this rule.
      visibility (list): Visibility declaration of this rule.
      jvm_args (str): Arguments to pass to the JVM in the run script.
      self_executable (bool): True to make the jar self executable.
      manifest (str): Manifest file to put into the jar. Can't be passed at the same time as
                      main_class.
    """
    if main_class and manifest:
        raise ParseError("Can't pass both main_class and manifest to scala_binary")
    if srcs:
        lib_rule = scala_library(
            name = f'_{name}#lib',
            srcs = srcs,
            deps = deps,
        )
        deps.append(lib_rule)
    if self_executable:
        preamble = '#!/bin/sh\nexec java %s -jar $0 ${@}' % jvm_args
        cmd, tools = _jarcat_cmd(main_class, preamble, manifest=manifest)
    else:
        cmd, tools = _jarcat_cmd(main_class, manifest=manifest)

    build_rule(
        name=name,
        deps=deps,
        data=data,
        outs=[out or name + '.jar'],
        srcs=[manifest],
        cmd=cmd,
        needs_transitive_deps=True,
        output_is_complete=True,
        binary=True,
        building_description="Creating jar...",
        requires=['scala'],
        visibility=visibility,
        tools=tools,
        labels=None if self_executable else ['scala_non_exe'],
    )


def _jarcat_cmd(main_class=None, preamble=None, manifest=None):
    """Returns the command we'd use to invoke jarcat, and the tool paths required."""
    cmd = '$TOOLS_JARCAT z -i . -o ${OUTS} -j'
    if main_class:
        cmd += f' -m "{main_class}"'
    if preamble:
        cmd += f" -p '{preamble}'"
    if manifest:
        cmd += ' --manifest "$SRCS"'
    return cmd, {'jarcat': [CONFIG.JARCAT_TOOL],
                 'scalac': [CONFIG.SCALAC_TOOL]}


CONFIG.setdefault('SCALAC_TOOL', 'scalac')
CONFIG.setdefault('SCALA_LIBRARY', '//third_party/scala:scala-library')
