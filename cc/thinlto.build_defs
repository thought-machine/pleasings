"""Extensions to builtin C / C++ rules to add support for ThinLTO.

See http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html
for more general information about it.

These rules should interoperate with the builtin ones, although it somewhat
defeats the point to only use them in some places.
The cc_embed_binary rules are not duplicated here since there's unlikely
to be any benefit for them, and we are attempting to reduce the amount
of duplication from the builtin rules. Similarly cc_object is not duplicated,
that's typically used for generating an unlinked standalone object file
in which case LTO isn't relevant.

One important limitation versus the builtin rules is that this does not
support rules as sources that expand to more than one file. It's unclear
at what point we'll be able to support this.

Obviously, you must be using sufficiently recent versions of Clang and Gold
(or lld) in order for this to work.

For now there are no C versions, but it'd not be hard to add those if needed.

N.B. These are VERY experimental and known not to work completely yet.
"""

# Save this for later.
_original_cc_library = cc_library

_COVERAGE_FLAGS = ' -ftest-coverage -fprofile-arcs -fprofile-dir=.'
# OSX's ld uses --all_load / --noall_load instead of --whole-archive.
_WHOLE_ARCHIVE = '-all_load' if CONFIG.OS == 'darwin' else '--whole-archive'
_NO_WHOLE_ARCHIVE = '-noall_load' if CONFIG.OS == 'darwin' else '--no-whole-archive'


def cc_library(name, srcs=None, hdrs=None, private_hdrs=None, deps=None, visibility=None, test_only=False,
               compiler_flags=None, linker_flags=None, pkg_config_libs=None, includes=None, defines=None,
               alwayslink=False, thinlto=True, _c=False):
    """Generate a C or C++ library target.

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files. These will be made available to dependent rules, so the distinction
                   between srcs and hdrs is important.
      private_hdrs (list): Header files that are available only to this rule and not exported to
                           dependent rules.
      deps (list): Dependent rules.
      visibility (list): Visibility declaration for this rule.
      test_only (bool): If True, is only available to other test rules.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker; these will not be used here but will be
                           picked up by a cc_binary or cc_test rule.
      pkg_config_libs (list): Libraries to declare a dependency on using pkg-config. Again, the ldflags
                              will be picked up by cc_binary or cc_test rules.
      includes (list): List of include directories to be added to the compiler's path.
      defines (list | dict): List of tokens to define in the preprocessor.
                             Alternatively can be a dict of name -> value to define, in which case
                             values are surrounded by quotes.
      alwayslink (bool): If True, any binaries / tests using this library will link in all symbols,
                         even if they don't directly reference them. This is useful for e.g. having
                         static members that register themselves at construction time.
      thinlto (bool): Enables ThinLTO optimisation. Defaults to true but can be selectively disabled.
    """
    if not thinlto:
        return _original_cc_library(
            name = name,
            srcs = srcs,
            hdrs = hdrs,
            private_hdrs = private_hdrs,
            deps = deps,
            visibility = visibility,
            test_only = test_only,
            compiler_flags = compiler_flags,
            linker_flags = linker_flags,
            pkg_config_libs = pkg_config_libs,
            includes = includes,
            defines = defines,
            alwayslink = alwayslink,
        )

    srcs = srcs or []
    hdrs = hdrs or []
    deps = deps or []
    compiler_flags = compiler_flags or []
    linker_flags = linker_flags or []
    pkg_config_libs = pkg_config_libs or []
    includes = includes or []
    defines = defines or []

    # Bazel suggests passing nonexported header files in 'srcs'. We however treat
    # srcs as things to actually compile and must mark a distinction.
    if CONFIG.BAZEL_COMPATIBILITY:
        src_hdrs = [src for src in srcs if src.endswith('.h')]
        private_hdrs = (private_hdrs or []) + src_hdrs
        srcs = [src for src in srcs if not src.endswith('.h')]
        # This is rather nasty; people seem to be relying on being able to reuse
        # headers that they've put in srcs. We hence need to re-export them here.
        hdrs += src_hdrs
        # Found this in a few cases... can't pass -pthread to the linker.
        linker_flags = ['-lpthread' if l == '-pthread' else l for l in linker_flags]

    # Handle defines being passed as a dict, as a nicety for the user.
    if isinstance(defines, dict):
        defines = [k if v is None else r'%s=\"%s\"' % (k, v) for k, v in sorted(defines.items())]

    labels = (['cc:ld:' + flag for flag in linker_flags] +
              ['cc:pc:' + lib for lib in pkg_config_libs] +
              ['cc:inc:%s/%s' % (get_base_path(), include) for include in includes] +
              ['cc:def:' + define for define in defines])

    if not srcs:
        # Header-only library, no compilation needed.
        return filegroup(
            name = name,
            srcs = hdrs,
            exported_deps = deps,
            labels = labels,
            test_only = test_only,
            visibility = visibility,
            output_is_complete = False,
        )

    # Collect the headers for other rules
    hdrs_rule = filegroup(
        name = name,
        tag = 'hdrs',
        srcs = hdrs,
        requires = ['cc_hdrs'],
        deps = deps,
        test_only = test_only,
        labels = labels,
        output_is_complete = False,
    )

    cmds, tools = _thinlto_library_cmds(_c, compiler_flags, pkg_config_libs)
    # Compile all the sources separately, this is much faster for large numbers of files
    # than giving them all to gcc in one invocation.
    tags = [src.replace('/', '_').replace('.', '_').replace(':', '_').replace('|', '_') for src in srcs]
    outs = [name + '_' + tag for tag in tags]
    bc_rules = [build_rule(
        name = name,
        tag = tag + '_bc',
        srcs = {'srcs': [src], 'hdrs': hdrs, 'priv': private_hdrs},
        outs = [out + '.bc.o'],  # Unbelievably this must end in .o, the tool's behaviour is totally different if not.
        optional_outs = ['*.gcno'],  # For coverage
        deps = deps,
        cmd = cmds,
        building_description = 'Compiling...',
        requires = ['cc_hdrs'],
        test_only = test_only,
        labels = labels,
        tools = tools,
        # TODO(pebers): handle includes and defines in _library_cmds as well.
        pre_build = _library_transitive_labels(_c, compiler_flags, pkg_config_libs) if (deps or includes or defines) else None,
        needs_transitive_deps = True,
    ) for src, tag, out in zip(srcs, tags, outs)]

    # Separate rules for the ThinLTO index files.
    # N.B. You can get an index of the required files via doing --plugin-opt=thinlto-index-only=index.txt,
    #      but right now that isn't useful to us. Theoretically it could improve incrementality by limiting
    #      the rebuilds we'd need to do but right now it's not really easy to express that.
    idx_rules = [build_rule(
        name = name,
        tag = tag + '_idx',
        srcs = [bc_rule],
        outs = [out + '.idx'],
        cmd = '$TOOL -flto=thin -Wl,--plugin-opt=thinlto-index-only $SRC -o $OUT',
        building_description = 'Generating LTO index...',
        test_only = test_only,
        tools = tools,
    ) for bc_rule, tag, out in zip(bc_rules, tags, outs)]

    # And for the actual object files
    o_rules = [build_rule(
        name = name,
        tag = tag + '_o',
        srcs = {
            'bc': [bc_rule],
            'idx': [idx_rule],
        },
        outs = [out + '.o'],
        cmd = '$TOOL -o $OUT -x ir $SRCS_BC -c -fthinlto-index=$SRCS_IDX',
        requires = ['cc_bc'],
        deps = bc_rules,
        building_description = 'Compiling / linking...',
        test_only = test_only,
        tools = tools,
        output_is_complete = True,
    ) for bc_rule, idx_rule, tag, out in zip(bc_rules, idx_rules, tags, outs)]

    # Collect these as a single rule which we can then provide.
    # We must do this even if there's only one in order to make sure the correct
    # dependencies are found with output_is_complete and so forth.
    o_rule = filegroup(
        name = name,
        tag = 'o',
        srcs = o_rules,
        test_only = test_only,
        output_is_complete = False,
        deps = deps,
    )
    bc_rule = filegroup(
        name = name,
        tag = 'bc',
        srcs = bc_rules,
        test_only = test_only,
        output_is_complete = False,
        deps = deps,
    )
    srcs = [o_rule]
    provides = {'cc': o_rule, 'cc_bc': bc_rule, 'cc_hdrs': hdrs_rule}

    if alwayslink:
        labels.append('cc:al:%s/%s.a' % (get_base_path(), name))

    return filegroup(
        name = name,
        srcs = srcs,
        deps = [hdrs_rule],
        provides = provides,
        labels = labels,
        test_only = test_only,
        visibility = visibility,
        output_is_complete = False,
    )


def cc_static_library(name, srcs=None, hdrs=None, compiler_flags=None, linker_flags=None,
                      deps=None, visibility=None, test_only=False, pkg_config_libs=None, _c=False):
    """Generates a C++ static library (.a).

    This is essentially just a collection of other cc_library rules into a single archive.
    Optionally this rule can have sources of its own, but it's quite reasonable just to use
    it as a collection of other rules.

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker.
      deps (list): Dependent rules.
      visibility (list): Visibility declaration for this rule.
      test_only (bool): If True, is only available to other test rules.
      pkg_config_libs (list): Libraries to declare a dependency on using pkg-config.
    """
    deps = deps or []
    provides = None
    if srcs:
        cc_library(
            name = '_%s#lib' % name,
            srcs = srcs,
            hdrs = hdrs,
            compiler_flags = compiler_flags,
            linker_flags = linker_flags,
            deps = deps,
            test_only = test_only,
            pkg_config_libs = pkg_config_libs,
            _c=_c,
        )
        deps.append(':_%s#lib' % name)
        deps.append(':_%s#lib_hdrs' % name)
        provides = {
            'cc_hdrs': ':_%s#lib_hdrs' % name,
            'cc': ':' + name,
        }
    return build_rule(
        name = name,
        deps = deps,
        outs = ['lib%s.a' % name],
        cmd = (
            'for a in `find . -name "*.a"`; do (cd $(dirname $a) && $TOOL x $(basename $a)); done;'
            '$TOOL rcs $OUT `find . -name "*.o" | sort`'
        ),
        needs_transitive_deps = True,
        output_is_complete = True,
        visibility = visibility,
        test_only = test_only,
        building_description = 'Archiving...',
        provides = provides,
        requires = ['cc'],
        tools = [CONFIG.AR_TOOL],
    )


def cc_shared_object(name, srcs=None, hdrs=None, out='', compiler_flags=None, linker_flags=None,
                     deps=None, visibility=None, test_only=False, pkg_config_libs=None,
                     includes=None, _c=False):
    """Generates a C++ shared object with its dependencies linked in.

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files. These will be made available to dependent rules, so the distinction
                   between srcs and hdrs is important.
      out (str): Name of the output .so. Defaults to name + .so.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker.
      deps (list): Dependent rules.
      visibility (list): Visibility declaration for this rule.
      test_only (bool): If True, is only available to other test rules.
      pkg_config_libs (list): Libraries to declare a dependency on using pkg-config.
      includes (list): Include directories to be added to the compiler's lookup path.
    """
    linker_flags = linker_flags or []
    if CONFIG.DEFAULT_LDFLAGS:
        linker_flags.append(CONFIG.DEFAULT_LDFLAGS)
    deps = deps or []
    provides = None
    if srcs:
        cc_library(
            name = '_%s#lib' % name,
            srcs = srcs,
            hdrs = hdrs,
            compiler_flags = compiler_flags,
            linker_flags = linker_flags,
            deps = deps,
            test_only = test_only,
            pkg_config_libs = pkg_config_libs,
            includes = includes,
            _c=_c,
        )
        deps.append(':_%s#lib' % name)
        deps.append(':_%s#lib_hdrs' % name)
        provides = {
            'cc_hdrs': ':_%s#lib_hdrs' % name,
            'cc': ':' + name,
        }
    cmds, tools = _binary_cmds(_c, linker_flags, pkg_config_libs, shared=True)
    return build_rule(
        name=name,
        srcs={'srcs': srcs, 'hdrs': hdrs},
        outs=[out or name + '.so'],
        deps=deps,
        visibility=visibility,
        cmd=cmds,
        building_description='Linking...',
        binary=True,
        needs_transitive_deps=True,
        output_is_complete=True,
        provides=provides,
        tools=tools,
        test_only=test_only,
        requires=['cc', 'cc_hdrs'],
        pre_build=_binary_transitive_labels(_c, linker_flags, pkg_config_libs, shared=True) if deps else None,
    )


def cc_binary(name, srcs=None, hdrs=None, private_hdrs=None, compiler_flags=None, linker_flags=None,
              deps=None, visibility=None, pkg_config_libs=None, test_only=False, static=False, _c=False):
    """Builds a binary from a collection of C++ rules.

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files.
      private_hdrs (list): Header files that are available only to this rule and not exported to
                           dependent rules.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker.
      deps (list): Dependent rules.
      visibility (list): Visibility declaration for this rule.
      pkg_config_libs (list): Libraries to declare a dependency on using pkg-config.
      test_only (bool): If True, this rule can only be used by tests.
      static (bool): If True, the binary will be linked statically.
    """
    linker_flags = linker_flags or []
    if CONFIG.DEFAULT_LDFLAGS:
        linker_flags.append(CONFIG.DEFAULT_LDFLAGS)
    if static:
        linker_flags.append('-static')
    cmds, tools = _binary_cmds(_c, linker_flags, pkg_config_libs)
    if srcs:
        if static:
            compiler_flags = compiler_flags or []
            compiler_flags.append('-static -static-libgcc')
        cc_library(
            name='_%s#lib' % name,
            srcs=srcs,
            hdrs=hdrs,
            private_hdrs=private_hdrs,
            deps=deps,
            pkg_config_libs=pkg_config_libs,
            compiler_flags=compiler_flags,
            test_only=test_only,
            _c=_c,
        )
        deps = deps or []
        deps.append(':_%s#lib' % name)
    return build_rule(
        name=name,
        outs=[name],
        deps=deps,
        visibility=visibility,
        cmd=cmds,
        building_description='Linking...',
        binary=True,
        needs_transitive_deps=True,
        output_is_complete=True,
        requires=['cc'],
        tools=tools,
        pre_build=_binary_transitive_labels(_c, linker_flags, pkg_config_libs),
        test_only=test_only,
    )


def cc_test(name, srcs=None, hdrs=None, compiler_flags=None, linker_flags=None, pkg_config_libs=None,
            deps=None, data=None, visibility=None, flags='', labels=None, flaky=0, test_outputs=None,
            size=None, timeout=0, container=False, sandbox=None,
            write_main=not CONFIG.BAZEL_COMPATIBILITY, _c=False):
    """Defines a C++ test using UnitTest++.

    We template in a main file so you don't have to supply your own.
    (Later we might allow that to be configured to help support other unit test frameworks).

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker.
      pkg_config_libs (list): Libraries to declare a dependency on using pkg-config.
      deps (list): Dependent rules.
      data (list): Runtime data files for this test.
      visibility (list): Visibility declaration for this rule.
      flags (str): Flags to apply to the test invocation.
      labels (list): Labels to attach to this test.
      flaky (bool | int): If true the test will be marked as flaky and automatically retried.
      test_outputs (list): Extra test output files to generate from this test.
      size (str): Test size (enormous, large, medium or small).
      timeout (int): Length of time in seconds to allow the test to run for before killing it.
      container (bool | dict): If true the test is run in a container (eg. Docker).
      sandbox (bool): Sandbox the test on Linux to restrict access to namespaces such as network.
      write_main (bool): Whether or not to write a main() for these tests.
    """
    timeout, labels = _test_size_and_timeout(size, timeout, labels)
    srcs = srcs or []
    linker_flags = linker_flags or []
    if CONFIG.DEFAULT_LDFLAGS:
        linker_flags.append(CONFIG.DEFAULT_LDFLAGS)
    if write_main:
        linker_flags.append('-lUnitTest++')
        genrule(
            name='_%s#main' % name,
            outs=['_%s_main.cc' % name],
            cmd='echo \'%s\' > $OUT' % _CC_TEST_MAIN_CONTENTS,
            test_only=True,
        )
        srcs.append(':_%s#main' % name)
    cmds, tools = _binary_cmds(_c, linker_flags, pkg_config_libs)
    test_cmd = None if not CONFIG.CPP_COVERAGE else {
        'opt': '$TEST %s' % flags,
        'dbg': '$TEST %s' % flags,
        'cover': '$TEST %s; R=$?; cp $GCNO_DIR/*.gcno . && gcov *.gcda && cat *.gcov > test.coverage; exit $R' % flags,
    }
    if srcs:
        cc_library(
            name='_%s#lib' % name,
            srcs=srcs,
            hdrs=hdrs,
            deps=deps,
            pkg_config_libs=pkg_config_libs,
            compiler_flags=compiler_flags,
            test_only=True,
            alwayslink=True,
            # For some reason thinlto always fails with "expected a single module"
            # on the test source file (but not others). At present we don't understand why,
            # but it is generally not of much benefit to use on test code anyway
            # (except in extreme cases you'd probably prefer the slightly faster compilation).
            thinlto=False,
            _c=_c,
        )
        deps = deps or []
        deps.append(':_%s#lib' % name)
    return build_rule(
        name=name,
        outs=[name],
        deps=deps,
        data=data,
        visibility=visibility,
        cmd=cmds,
        test_cmd=test_cmd,
        building_description='Linking...',
        binary=True,
        test=True,
        needs_transitive_deps=True,
        output_is_complete=True,
        requires=['cc', 'cc_hdrs'],
        labels=labels,
        tools=tools,
        pre_build=_binary_transitive_labels(_c, linker_flags, pkg_config_libs),
        flaky=flaky,
        test_outputs=test_outputs,
        test_timeout=timeout,
        container=container,
        test_sandbox=sandbox,
    )


# This is a lightweight way of building the test main, but it's awkward not
# having command line output as well as XML output.
_CC_TEST_MAIN_CONTENTS = """
#include <algorithm>
#include <fstream>
#include <stdlib.h>
#include <string.h>
#include "UnitTest++/UnitTest++.h"
#include "UnitTest++/XmlTestReporter.h"
int main(int argc, char const *argv[]) {
    auto run_named = [argc, argv](UnitTest::Test* test) {
        return argc <= 1 || std::any_of(argv + 1, argv + argc, [test](const char* name) {
            return strcmp(test->m_details.testName, name) == 0;
        });
    };

    std::ofstream f("test.results");
    if (!f.good()) {
      fprintf(stderr, "Failed to open results file\\n");
      return -1;
    }
    if (getenv("COVERAGE")) {
      std::ofstream c("test.coverage");
      c << "gcov";
    }
    UnitTest::XmlTestReporter reporter(f);
    UnitTest::TestRunner runner(reporter);
    return runner.RunTestsIf(UnitTest::Test::GetTestList(),
                             NULL,
                             run_named,
                             0);
}
"""


def _build_flags(compiler_flags, pkg_config_libs, defines=None, c=False, dbg=False):
    """Builds flags that we'll pass to the compiler invocation."""
    compiler_flags = compiler_flags or []
    if c:
        compiler_flags = [CONFIG.DEFAULT_DBG_CFLAGS if dbg else CONFIG.DEFAULT_OPT_CFLAGS] + compiler_flags
    else:
        compiler_flags = [CONFIG.DEFAULT_DBG_CPPFLAGS if dbg else CONFIG.DEFAULT_OPT_CPPFLAGS] + compiler_flags
    compiler_flags.append('-fPIC')
    if defines:
        compiler_flags.extend(['-D' + define for define in defines])
    pkg_config_cmd = ' '.join(['`pkg-config --cflags %s`' % x for x in pkg_config_libs or []])
    return ' '.join(compiler_flags) + ' ' + pkg_config_cmd


def _binary_build_flags(linker_flags, pkg_config_libs, shared=False, alwayslink=''):
    """Builds flags that we'll pass to the linker invocation."""
    pkg_config_cmd = ' '.join(['`pkg-config --libs %s`' % x for x in pkg_config_libs or []])
    objs = '`find . -name "*.o" -or -name "*.a" | sort`'
    linker_prefix = '' if CONFIG.LINK_WITH_LD_TOOL else '-Wl,'
    if (not shared) and alwayslink:
        objs = '%s%s %s %s%s %s' % (linker_prefix, _WHOLE_ARCHIVE, alwayslink, linker_prefix, _NO_WHOLE_ARCHIVE, objs)
    build_id_flag = ''
    if CONFIG.OS != 'darwin':
        # We don't order libraries in a way that is especially useful for the linker, which is
        # nicely solved by --start-group / --end-group. Unfortunately the OSX linker doesn't
        # support those flags; in many cases it will work without, so try that.
        # Ordering them would be ideal but we lack a convenient way of working that out from here.
        objs = '%s--start-group %s %s--end-group' % (linker_prefix, objs, linker_prefix)
        # OSX's ld doesn't have --build-id
        # TODO(pebers): Not sure about other OS's / linkers? This might be GNU specific?
        build_id_flag = linker_prefix + '--build-id=none'
    if shared:
        objs = '-shared %s%s %s %s%s' % (linker_prefix, _WHOLE_ARCHIVE, objs, linker_prefix, _NO_WHOLE_ARCHIVE)
    linker_flags = ' '.join([linker_prefix + f for f in (linker_flags or [])])
    return ' '.join([objs, build_id_flag, linker_flags, pkg_config_cmd])


def _thinlto_library_cmds(c, compiler_flags, pkg_config_libs, extra_flags=''):
    """Returns the commands needed for a cc_library rule."""
    dbg_flags = _build_flags(compiler_flags, pkg_config_libs, c=c, dbg=True)
    opt_flags = _build_flags(compiler_flags, pkg_config_libs, c=c)
    cmd_template = '$TOOL -c -o $OUT -flto=thin -I . ${SRCS_SRCS} %s %s'
    cmds = {
        'dbg': cmd_template % (dbg_flags, extra_flags),
        'opt': cmd_template % (opt_flags, extra_flags),
    }
    if CONFIG.CPP_COVERAGE:
        cmds['cover'] = cmd_template % (dbg_flags + _COVERAGE_FLAGS, extra_flags)
    return cmds, [CONFIG.CC_TOOL if c else CONFIG.CPP_TOOL]


def _binary_cmds(c, linker_flags, pkg_config_libs, extra_flags='', shared=False, alwayslink=''):
    """Returns the commands needed for a cc_binary, cc_test or cc_shared_object rule."""
    flags = _binary_build_flags(linker_flags, pkg_config_libs, shared, alwayslink)
    tool = '$TOOLS_LD' if CONFIG.LINK_WITH_LD_TOOL else '$TOOLS_CC -fuse-ld=$(basename $TOOLS_LD)'
    cmds = {
        'dbg': '%s -o ${OUT} %s %s' % (tool, flags, extra_flags),
        'opt': '%s -o ${OUT} %s %s' % (tool, flags, extra_flags),
    }
    if CONFIG.CPP_COVERAGE:
        cmds['cover'] = '%s -o ${OUT} %s %s %s' % (tool, flags, extra_flags, _COVERAGE_FLAGS)
    return cmds, {
        'cc': [CONFIG.CC_TOOL if c else CONFIG.CPP_TOOL],
        'ld': [CONFIG.LD_TOOL],
    }


def _library_transitive_labels(c, compiler_flags, pkg_config_libs):
    """Applies commands from transitive labels to a cc_library rule."""
    def apply_transitive_labels(name):
        labels = get_labels(name, 'cc:')
        flags = ['-isystem %s' % l[4:] for l in labels if l.startswith('inc:')]
        flags.extend(['-D' + l[4:] for l in labels if l.startswith('def:')])
        pkg_config_libs.extend([l[3:] for l in labels if l.startswith('pc:') and l[3:] not in pkg_config_libs])
        if flags:  # Don't update if there aren't any relevant labels
            cmds, _ = _thinlto_library_cmds(c, compiler_flags, pkg_config_libs, ' '.join(flags))
            for k, v in cmds.items():
                set_command(name, k, v)
    return apply_transitive_labels


def _binary_transitive_labels(c, linker_flags, pkg_config_libs, shared=False):
    """Applies commands from transitive labels to a cc_binary, cc_test or cc_shared_object rule."""
    def apply_transitive_labels(name):
        labels = get_labels(name, 'cc:')
        linker_prefix = '' if CONFIG.LINK_WITH_LD_TOOL else '-Wl,'
        flags = [linker_prefix + l[3:] for l in labels if l.startswith('ld:')]
        flags.extend(['`pkg-config --libs %s`' % l[3:] for l in labels if l.startswith('pc:')])
        # ./ here because some weak linkers don't realise ./lib.a is the same file as lib.a
        # and report duplicate symbol errors as a result.
        alwayslink = ' '.join(['./' + l[3:] for l in labels if l.startswith('al:')])
        # Probably a little optimistic to check this (most binaries are likely to have *some*
        # kind of linker flags to apply), but we might as well.
        if flags or alwayslink:
            cmds, _ = _binary_cmds(c, linker_flags, pkg_config_libs, ' '.join(flags), shared, alwayslink)
            for k, v in cmds.items():
                set_command(name, k, v)
    return apply_transitive_labels
