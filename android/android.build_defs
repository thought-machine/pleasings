"""A set of build rules for Android which can produce .apks and .aars.

There are a number of configurable options in your .plzconfig:

[buildconfig]
; Where your Android tools are installed; aka ANDROID_HOME
android-home = /opt/android
; The version of the Android build tools to use.
android-tools-version = 23.0.2
; A rule for the android API jar, which is a dependency of many things.
android-jar = //third_party/android:android
; Manifest merger tool. Uses com.android.tools.build:manifest-merger.
android-manifest-merger = //third_party/android:manifest_merger
; Location of the Android keystore to use for signing.
; If this isn't passed the app won't be signed; set it to the empty string
; if that's what you want.
android-keystore = /etc/android/debug.keystore
; Password for the keystore.
android-keystore-password = android
; Alias for the key name in the keystore.
android-keystore-alias = androiddebugkey

TODOs:
 - AIDL
 - Proguard
 - general ergonomics
 - Redo the tools / config variable setup which is a little messy
 - Write android_maven_jars as an equivalent to maven_jars
 - BuildConfig.java
 - No doubt we are missing lots of other features
"""

check_config('ANDROID_HOME', example='/opt/android', rule='Android')


def android_resource(name, manifest, res, package='', resources_root=None, assets=None,
                     deps=None, visibility=None):
    """Defines an Android resource target built using aapt.

    Args:
      name (str): Name of the rule.
      manifest (str): Either a file or a build target containing the AndroidManifest.xml file.
      res (str | list): Resources , typically a res/ directory but can be multiple things.
      package (str): Java package for the generated R.java file.
      resources_root (str): Root directory for resources, as java_library.
      assets (str): Directory containing assets. Often not used.
      deps (list): Extra dependencies for this rule.
      visibility (list): Visibility specification for this rule.
    """
    if isinstance(res, list):
        if len(res) > 1:
            res = _merge_resources(
                name = name,
                srcs = res,
            )
        else:
            res = res[0]
    # Slightly awkward solution to generate the .java and .txt files separately.
    java_src_rule = android_aapt(
        name = name,
        tag = 'java_src',
        manifest = manifest,
        package = package,
        res = res,
        assets = assets,
        deps = deps,
    )
    res_rule = build_rule(
        name = name,
        tag = 'res',
        srcs = {'res': [res], 'assets': [assets] if assets else []},
        outs = [name + '_res.jar'],
        cmd = 'mv $SRCS_RES res && %s $TOOL -d -o $OUTS -i .' % ('mv $SRCS_ASSETS assets && ' if assets else ''),
        tools = [CONFIG.JARCAT_TOOL],
    )
    filegroup(
        name = '_%s#manifest' % name,
        srcs = [manifest],
        visibility = visibility,
    )
    filegroup(
        name = '_%s#srcs' % name,
        srcs = [res],
        visibility = visibility,
    )
    r_rule = android_aapt(
        name = name,
        tag = 'r',
        manifest = manifest,
        package = package,
        res = res,
        assets = assets,
        deps = deps,
        out = 'R.txt',
    )
    java_rule = android_library(
        name = '_%s#java' % name,
        srcs = [java_src_rule],
        deps = deps,
    )
    return filegroup(
        name = name,
        visibility = visibility,
        provides = {
            'java': java_rule,
            'res_src': ':_%s#srcs' % name,
            'manifest': ':_%s#manifest' % name,
            'res': res_rule,
            'r': r_rule,
        },
    )


def android_library(name, srcs=None, src_dir=None, resources=None, resources_root=None, deps=None,
                    exported_deps=None, visibility=None, test_only=False, _provides=None):
    """Wrapper around java_library which is slightly more specific to Android code. Also dexes.

    Args:
      name (str): Name of the rule
      srcs (list): Java source files to compile for this library
      src_dir (str): Directory containing Java source files.
      resources (list): Resources to include in the .jar file
      resources_root (str): Root directory to treat resources relative to; ie. if we are in
                            //project/main/resources and resources_root is project/main then
                            the resources in the .jar will be in the subdirectory 'resources'.
      deps (list): Dependencies of this rule.
      exported_deps (list): Exported dependencies, ie. dependencies that other things depending on this
                            rule will also receive when they're compiling. This is quite important for
                            Java; any dependency that forms part of the public API for your classes
                            should be an exported dependency.
      visibility (list): Visibility declaration of this rule.
      test_only (bool): If True, this rule can only be depended on by tests.
    """
    deps = deps or []
    exported_deps = exported_deps or []
    java_rule = '_%s#java' % name
    _provides = _provides or {}
    java_library(
        name = java_rule,
        srcs = srcs,
        src_dir = src_dir,
        resources = resources,
        resources_root = resources_root,
        deps = deps + [CONFIG.ANDROID_JAR],
        exported_deps = exported_deps,
        visibility = visibility,
        test_only = test_only,
        javac_flags = [
            '-encoding UTF-8',
        ],
    )
    dex_rule = dex_library(
        name = name,
        tag = 'ldex',
        src = ':' + java_rule,
        test_only = test_only,
        visibility = visibility,
        deps = deps + exported_deps,
    )
    _provides['dex'] = dex_rule
    return filegroup(
        name = name,
        srcs = [':' + java_rule],
        provides = _provides,
        deps = [dex_rule],
        test_only = test_only,
        visibility = visibility,
    )


def android_binary(name, resources, assets=None, out=None, arch=None, deps=None, visibility=None,
                   labels=None, merge_manifests=False, resource_deps=None, native_libs=None):
    """Creates an APK from a bunch of android_library rules.

    Args:
      name (str): Name of the rule.
      resources (str): Rule providing resources for this apk; typically an android_resource rule.
      assets (str): Additional asset rule to pass to aapt.
                    TODO(pebers): This is a bit of a hack, really `resources` should be enough.
      out (str): Name of output .apk, defaults to name + .apk.
      arch (str): Architecture to include native libraries for. If not given all are included;
                  otherwise it's limited to just the given one. Typically something like 'x86'
                  or 'armeabi-v7a'.
      deps (list): Dependencies of this rule.
      visibility (list): Visibility declaration of this rule.
      labels (list): Labels to apply to this rule.
      merge_manifests (bool): True to merge manifests of all dependencies, false to just use
                              the existing one.
      resource_deps (list): Resource dependencies when running aapt.
      native_libs (list): Native libraries to add. See native.build_defs for more information;
                          typically these would be ndk_shared_object rules.
    """
    dex_rule = build_rule(
        name = name,
        tag = 'dex',
        deps = deps,
        outs = [name + '.dex'],
        cmd = '%s --dex --output=$OUT $(find . -name "*.dex.jar" | sort)' % _android_tool('dex_tool'),
        needs_transitive_deps = True,
        output_is_complete = True,
        building_description = 'Dexing...',
        requires = ['dex'],
    )
    # Need to extract all the native libraries from all dependencies.
    flag = 'jni/' + ((arch + '/') if arch else '')
    native_rule = build_rule(
        name = name,
        tag = 'native',
        deps = deps,
        outs = [name + '_native_libs.jar'],
        cmd = '$TOOL -strict -i . -s .aar -s .jar -e _src.aar -e _src.jar -t "%s" -t "META-INF/services/" -o $OUTS -r jni/:lib/' % flag,
        needs_transitive_deps = True,
        output_is_complete = True,
        requires = ['android'],
        tools = [CONFIG.JARCAT_TOOL],
        building_description = 'Extracting native libraries...',
    )
    if merge_manifests:
        manifest_rule = _merge_manifests(
            name = name,
            resources = resources,
            deps = deps,
        )
    else:
        filegroup(
            name = '_%s#manifest' % name,
            srcs = [resources],
            requires = ['manifest'],
        )
        manifest_rule = ':_%s#manifest' % name
    # Use aapt to build the actual .apk
    aapt_rule = android_aapt(
        name = name,
        tag = 'aapt',
        manifest = manifest_rule,
        res = resources,
        assets = assets,
        # This is .jar because it makes things easier for jarcat in the next rule.
        out = name + '_aapt.jar',
        apk = True,
        deps = resource_deps,
    )
    out = out or name + '.apk'
    unsigned_rule = build_rule(
        name = name,
        tag = 'unsigned',
        srcs = {
            'dex': [dex_rule],
            'other': [native_rule, aapt_rule] + (native_libs or []),
        },
        outs = ['unsigned_' + out],
        cmd = 'mv $SRCS_DEX classes.dex && $TOOL -a 4 -i . -o $OUTS --include_other --strict',
        requires = ['res'],
        tools = [CONFIG.JARCAT_TOOL],
    )

    secrets = []
    keystore = CONFIG.get('ANDROID_KEYSTORE')
    cmd = 'cp $SRC $OUT'
    if keystore is None:
        log.warning("android-keystore not specified, will create unsigned .apks. "
                    "Set it to an empty string if this is the desired functionality.")
    elif keystore:
        password = CONFIG.get('ANDROID_KEYSTORE_PASSWORD')
        if password is None:
            log.warning("android-keystore-password not specified, encrypted keystores won't work. "
                        "Set it to an empty string if this is the desired functionality.")
            password = ''
        alias = CONFIG.get('ANDROID_KEYSTORE_ALIAS', '')
        if not alias:
            raise ParseError('You must specify android-keystore-alias in your .plzconfig')
        cmd = ' && '.join([
            'cp $SRCS tmp.apk',
            '$TOOLS_SIGNER -verbose -keystore $SECRETS -storepass "%s" tmp.apk %s' % (password, alias),
            '$TOOLS_JARCAT -a 4 -i tmp.apk -s ".apk" -o $OUT',
        ])
        secrets = [keystore]

    return build_rule(
        name = name,
        srcs = [unsigned_rule],
        outs = [out],
        cmd = cmd,
        deps = deps,
        secrets = secrets,
        visibility = visibility,
        labels = (labels or []) + ['apk'],
        tools = {
            'signer': ['jarsigner' if keystore else None],
            'jarcat': [CONFIG.JARCAT_TOOL],
        },
    )


def android_aar(name, resources, manifest=None, deps=None, visibility=None):
    """Builds a .aar package for Android.

    Args:
      name (str): Name of the rule.
      resources (str): Rule or source file containing the resources for this package.
      manifest (str): Rule or source file containing the manifest.
      deps (list): Dependencies of this rule.
      visibility (list): Visibility declaration of this rule.
    """
    if not manifest and not resources:
        raise ParseError('Must pass at least one of manifest or resources to android_aar')
    # Use this to only pull the first level of deps into the AAR.
    # Would be nice if we could get away without the intermediate rule...
    filegroup(
        name = '_%s#deps' % name,
        srcs = (deps or []) + [manifest],
    )
    java_binary(
        name = '_%s#classes' % name,
        deps = [':_%s#deps' % name],
        out = 'classes.jar',
    )
    build_rule(
        name = name,
        srcs = [':_%s#classes' % name, manifest, resources],
        visibility = visibility,
        outs = [name + '.aar'],
        cmd = 'mv $SRCS . && $TOOL -dno $OUTS -i .',
        requires = ['r', 'res_src', 'manifest'],
        tools = [CONFIG.JARCAT_TOOL],
    )


def android_maven_jar(name, id=None, src=None, repository=None, hash=None, deps=None,
                      visibility=None, test_only=False, resources=False):
    """Wrapper around standard maven_jar rule which dexes the contents.

    Args have the same meaning as for maven_jar, except 'src' which allows passing in a .aar
    directly from another rule to get the dexing etc set up for you.
    """
    provides = {}
    deps = deps or []
    if id:
        maven_jar(
            name = '_%s#mvn' % name,
            id = id,
            hash = hash,
            repository = repository,
            deps = deps,
            # Easier to write the dex rule without these.
            sources = False,
            visibility = visibility,
            test_only = test_only,
        )
        src = ':_%s#mvn' % name
        dex_src = src
        if id.endswith('@aar'):
            provides['java'] = ':_%s#mvn_classes' % name
        if resources:
            res_rule = android_aar_resources(
                name = '_%s#res' % name,
                src = ':_%s#mvn' % name,
            )
            deps.append(res_rule)
            provides['res_src'] = res_rule
    elif src:
        # Extract the classes.jar
        classes_rule = build_rule(
            name = name,
            tag = 'classes',
            srcs = [src],
            outs = [name + '_classes.jar'],
            cmd = 'unzip ${SRCS} classes.jar && mv classes.jar $OUT',
            visibility = visibility,
            exported_deps = deps,
        )
        dex_src = classes_rule
        provides['java'] = classes_rule
    else:
        raise ParseError('Must pass one of id or src to android_maven_jar')
    dexjar_rule = dex_library(
        name = name,
        tag = 'dexjar',
        src = dex_src,
        visibility = visibility,
        test_only = test_only,
        deps = deps,
    )
    provides['dex'] = dexjar_rule
    filegroup(
        name = name,
        srcs = [src],
        deps = [dexjar_rule],
        provides = provides,
        visibility = visibility,
        output_is_complete = False,
        test_only = test_only,
    )


def android_jar(name, platform, visibility=None, deps=None):
    """Fetches an Android platform API jar off the system.

    You may need to set android-home in your .plzconfig for this to locate it correctly.

    Args:
      name (str): Name of the rule.
      platform (str): Name of the platform version (e.g. android-23).
      visibility (list): Visibility declaration.
      deps (list): Extra dependencies.
    """
    return system_library(
        name = name,
        srcs = [join_path(CONFIG.ANDROID_HOME, 'platforms', platform, 'android.jar')],
        visibility = visibility,
        deps = deps,
    )


def android_aar_resources(name, src, visibility=None, resource_deps=None, deps=None):
    """Defines a rule to extract resources from a .aar and compile the generated R.java classes.

    Args:
      name: Name of the rule.
      src: Source .aar file or rule.
      visibility: Visibility specification of the rule.
      resource_deps: Any dependencies needed to compile the resources.
      deps: Dependencies for compiling the generated Java source.
    """
    manifest_rule = build_rule(
        name = name,
        tag = 'manifest',
        srcs = [src],
        outs = [name + '/AndroidManifest.xml'],
        cmd = 'unzip -d %s $SRC AndroidManifest.xml' % name,
    )
    res_rule = build_rule(
        name = name,
        tag = 'res',
        srcs = [src],
        outs = [name + '/res'],
        cmd = 'unzip -d %s $SRC' % name,
    )
    src_rule = android_aapt(
        name = name,
        tag = 'src',
        out = name + '/R.java',
        manifest = manifest_rule,
        res = res_rule,
        deps = resource_deps,
    )
    return android_library(
        name = name,
        src_dir = src_rule,
        visibility = visibility,
        deps = deps,
        _provides = {'res_src': res_rule},
    )


def dex_library(name, src, tag=None, visibility=None, test_only=False, deps=None):
    """Dexes the contents of a single .jar file.

    This is not normally used on its own. Typically you'd use android_library or android_maven_jar
    instead to get stuff dexed for you.
    """
    dex_rule = build_rule(
        name = name,
        tag = 'dex',
        srcs = [src],
        outs = [name + '.dex'],
        cmd = 'unzip $SRCS && %s --dex --output=$OUT `find . -name "*.class"`' % _android_tool('dex_tool'),
        requires = ['java'],
        building_description = 'Dexing...',
        test_only = test_only,
    )
    # Have to put dexes into a jar to combine them again.
    return build_rule(
        name = name,
        tag = tag,
        srcs = [dex_rule],
        outs = [name + '.dex.jar'],
        cmd = 'mv $SRCS classes.dex && $TOOL -d -i classes.dex -o $OUT',
        visibility = visibility,
        building_description = 'Dexing...',
        test_only = test_only,
        deps = deps,
        tools = [CONFIG.JARCAT_TOOL],
    )


def android_aapt(name, manifest, out=None, tag=None, package=None, res=None,
                 assets=None, apk=False, visibility=None, deps=None):
    """Defines a rule to run aapt for an Android app.

    Note that this is relatively low-level and is typically not called directly.

    Args:
      name (str): Name of the rule.
      manifest (str): Either a file or a build target containing the AndroidManifest.xml file.
      out (str): Name of output file, defaults to R.java.
      tag (str): Optional tag for the rule name.
      package (str): Java package for the generated R.java file.
      res (str): Directory containing resources.
      assets (str): Directory containing assets. Often not used.
      apk (bool): True to generate a .apk (and not the Java source). You should specify 'out' as
                  the name of the .apk file.
      visibility (list): Visibility specification for this rule.
      deps (list): Any dependencies of this rule.
    """
    aapt_tool = _android_tool('aapt_tool')
    cmd = ' '.join([
        aapt_tool,
        'package',
        '-I $(location %s)' % CONFIG.ANDROID_JAR,
        '-M $SRCS_MANIFEST',
        '`find . -type d -name res -printf " -S %p" | sort`',
        '-A $SRCS_ASSETS' if assets else '',
        '--custom-package %s' % package if package else '',
        '--output-text-symbols .',
        '-J .',
        '-F $OUT' if apk else '',
        '--no-version-vectors',
        '--auto-add-overlay',
    ])

    if out and not apk and out.endswith('R.java'):
        cmd += ' && mv R.java $OUT'

    return build_rule(
        name = name,
        tag = tag,
        srcs = {
            'res': [res],
            'assets': [assets],
            'manifest': [manifest],
        },
        outs = [out or 'R.java'],
        cmd = cmd,
        tools = {
            'jar': [CONFIG.ANDROID_JAR],
            'aapt': [aapt_tool],
            'jarcat': [CONFIG.JARCAT_TOOL],
        },
        visibility = visibility,
        output_is_complete = True,
        building_description = 'Running aapt...',
        deps = deps,
        requires = ['res_src'],
    )


def android_project(name, out=None, srcs=None, package='',
                    manifest='src/main/AndroidManifest.xml',
                    res='src/main/res', resources_root='src/main',
                    library=False, assets=None, resource_deps=None, native_libs=None,
                    deps=None, visibility=None):
    """Defines a high-level rule for building an entire Android project.

    This typically sits in the directory alongside src/.

    This builds all the Java sources in one go so doesn't achieve the best
    results for incrementality or code reuse, but it's a simple way of getting
    up and going. If you want more control, it's quite obviously just a wrapper
    around android_resource, android_library and android_binary which are not
    too hard to break out separately.

    Args:
      name (str): Name of the rule.
      out (str): Name of the output .apk file.
      srcs (list): Java source files to compile. Defaults to everything under src/main/java.
      package (str): Custom package override for the generated aapt resources. Usually not necessary.
      manifest (str): The AndroidManifest.xml file. Defaults to src/main/AndroidManifest.xml
      res (str): Resources for the project. Defaults to src/main/res.
      resources_root (str): Root directory for the resources. Defaults to src/main, not often changed.
      assets (str): Directory containing static assets. Default is not to add any, if you do
                    you'd set it to e.g. src/main/assets.
      library (bool): If True, this project is set up only as a library (i.e. no APK will be produced).
      resource_deps (list): Dependencies for resource compile.
      native_libs (list) Native libraries to include. See native.build_defs for more information;
                         typically these would be ndk_shared_object rules.
      deps (list): Any other dependencies (typically code dependencies)
      visibility (list): Visibility specification.
    """
    deps = deps or []
    srcs = srcs or glob(['src/main/java/**/*.java'])

    resource_rule = android_resource(
        name = '_%s#res' % name,
        manifest = manifest,
        package = package,
        assets = assets,
        res = res,
        resources_root = resources_root,
        deps = resource_deps,
    )

    library_rule = android_library(
        name = '_%s#lib' % name,
        srcs = srcs,
        deps = [resource_rule] + deps,
    )

    if library:
        return filegroup(
            name = name,
            srcs = [library_rule, resource_rule],
            provides = {
                'dex': library_rule,
                'java': library_rule,
                'res_src': resource_rule,
                'manifest': resource_rule,
                'res': resource_rule,
                'r': resource_rule,
            },
            visibility = visibility,
        )

    apk_rule = android_binary(
        name = name,
        out = out,
        resource_deps = resource_deps,
        resources = resource_rule,
        native_libs = native_libs,
        deps = [library_rule] + deps,
        visibility = visibility,
    )

    # Generate a virtual rule that will install the final .apk on device via plz run.
    # When run in debug mode, also attaches to the device using logcat.
    # N.B. only works when run from the project root.
    install_cmd = 'adb install -r $(out_location %s)' % apk_rule
    sh_cmd(
        name = name + '_install',
        cmd = {
            'opt': 'exec ' + install_cmd,
            'dbg': install_cmd + ' && adb logcat -c && adb logcat',
        },
        deps = [apk_rule],
    )

    return apk_rule


def _merge_manifests(name, resources, tag='manifest', deps=None):
    """Defines a rule to merge Android manifests together.

    This is typically called indirectly by android_binary with merge_manifests=True.

    Args:
      name (str): Name of the rule.
      resources (str): Rule defining resources for this app.
      tag (str): Optional tag to apply to the rule name.
      deps (list): Dependencies of this rule.
    """
    return build_rule(
        name = name,
        tag = 'manifest',
        deps = deps,
        outs = ['AndroidManifest.xml'],
        srcs = [resources],
        cmd = ' '.join([
            'MANIFESTS="";',
            'for i in `find . -name \'*.aar\'`; do',
            'unzip -qq $i AndroidManifest.xml && mv AndroidManifest.xml ${i/.aar/.xml} &&',
            'MANIFESTS="$MANIFESTS ${i/.aar/.xml}";',
            'done; ',
            # manifest_merger seems to not output anything if we use paths in the workdir?
            'TEMP=`mktemp` && ',
            '$(exe %s) merge --main $SRCS --out $TEMP --libs $MANIFESTS && ' % CONFIG.ANDROID_MANIFEST_MERGER,
            'mv $TEMP $OUT',
        ]),
        tools = [CONFIG.ANDROID_MANIFEST_MERGER],
        needs_transitive_deps = True,
        output_is_complete = True,
        requires = ['manifest'],
    )


def _merge_resources(name, srcs, tag='merge_res'):
    """Defines a rule to merge Android resources together."""
    return build_rule(
        name = name,
        tag = tag,
        srcs = srcs,
        outs = [name + '_merged_res'],
        cmd = 'mkdir $OUT && for SRC in $SRCS; do rsync -r $SRC/ $OUT; done',
        output_is_complete = True,
    )


def _android_tool(tool_name):
    """Gets the location of one of the Android tools."""
    build_tools_dir = join_path(CONFIG.ANDROID_HOME, 'build-tools', CONFIG.ANDROID_TOOLS_VERSION)
    if tool_name == 'aapt_tool':
        return join_path(build_tools_dir, 'aapt')
    elif tool_name == 'dex_tool':
        return join_path(build_tools_dir, 'dx')
    elif tool_name == 'zipalign_tool':
        return join_path(build_tools_dir, 'zipalign')
    else:
        raise KeyError('Unknown tool: %s' % tool_name)


CONFIG.setdefault('ANDROID_HOME', '/opt/android')
CONFIG.setdefault('ANDROID_TOOLS_VERSION', '23.0.2')
CONFIG.setdefault('ANDROID_JAR', '//third_party/android')
