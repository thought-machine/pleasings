def rust_library(name, srcs, deps=None, visibility=None):
    """Defines a build rule for a Rust library.

    Args:
      name: Name of the rule.
      srcs: Source files for this library.
      deps: Dependencies of this rule needed for it to compile.
      visibility: Visibility declaration.
    """
    build_rule(
        name = name,
        srcs = srcs,
        outs = ['lib%s.rlib' % name],
        cmd = _rustc_cmds(deps, crate_type='lib'),
        deps = deps,
        visibility = visibility,
    )


def rust_binary(name, main, deps=None, visibility=None):
    """Defines a build rule for a Rust standalone binary.

    Args:
      name: Name of the rule.
      main: Source files containing the main() function.
      deps: Dependencies of this rule needed for it to compile.
      visibility: Visibility declaration.
    """
    build_rule(
        name = name,
        srcs = [main],
        outs = [name],
        cmd = _rustc_cmds(deps),
        deps = deps,
        visibility = visibility,
    )


def _rustc_cmds(deps=None, crate_type=None):
    cmd = [CONFIG.RUSTC_TOOL, '$SRCS', '-o', '$OUT']
    if crate_type:
        cmd.append('--crate-type=' + crate_type)
    if deps:
        cmd.extend('-L $(dir %s)' % dep for dep in deps)
    cmd = ' '.join(cmd)
    return {
        'dbg': cmd + ' -g',
        'opt': cmd + ' -O',
    }


# Add the RUSTC_TOOL to the config so people can override with package().
# In future it would be nice to be able to configure this kind of thing
# in plzconfig.
CONFIG.setdefault('RUSTC_TOOL', 'rustc')
