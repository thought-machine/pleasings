"""Build rules for working with Hashicorp Terraform (https://terraform.io)
"""

TERRAFORM_DEFAULT_TOOLCHAIN = CONFIG.get('TERRAFORM_DEFAULT_TOOLCHAIN') or "//third_party/binary:terraform"
TERRAFORM_PLZ_TOOL = CONFIG.get('TERRAFORM_PLZ_TOOL') or "//third_party/terraform:plz"

def terraform_toolchain(name:str, version:str, hashes:list = [], labels: list = [], visibility:list = []):
    """Build rule for obtaining a version of the Terraform CLI.
    Args:
        name: The name of the build rule.
        version: The version of Terraform to download in MAJOR.MINOR.PATCH format. e.g. "0.12.3".
        hashes: The hashes to verify the downloaded archive against.
        labels: The additonal labels to add to the build rule.
        visibility: The targets to make the toolchain visible to.
    """
    download=remote_file(
        name = f"_{name}_download",
        out = f"_{name}_download",
        url = f"https://releases.hashicorp.com/terraform/{version}/terraform_{version}_{CONFIG.OS}_{CONFIG.ARCH}.zip",
        hashes = hashes,
        extract = True,
    )
    return genrule(
        name=name,
        srcs=[download],
        # We output into a directory so we can add `terraform` to the PATH at runtime.
        outs=[f"_{name}_download/terraform"],
        cmd="mkdir -p $(dirname $OUTS) && mv $SRCS/terraform $OUTS",
        visibility = visibility,
        binary = True,
    )

def terraform_provider(
    name: str,
    version: str = None,
    registry: str = "registry.terraform.io",
    namespace: str = "hashicorp",
    provider_name: str = None,
    url: str = None,
    hashes: list = [],
    labels: list = [],
    visibility: list = [],
):
    """Build rule for obtaining a Terraform Provider.
    Args:
        name: The name of the build rule.
        version: The version of Terraform the Terraform Provider MAJOR.MINOR.PATCH format. e.g. "2.1.2".
        registry: Terraform 0.13+ - The Terraform registy hostname this provider is from.
        namespace: Terraform 0.13+ - The Terraform registy namespace this provider is in.
        provider_name: Terraform 0.13+ - The Terraform registy type this provider is e.g. "null", defaults to name.
        url: The url to download and extract the Terraform provider from.
        hashes: The hashes to verify the downloaded archive against.
        labels: The additonal labels to add to the build rule.
        visibility: The targets to make the toolchain visible to.
    """
    provider_name = provider_name or name
    url = url if url else f"https://releases.hashicorp.com/terraform-provider-{provider_name}/{version}/terraform-provider-{provider_name}_{version}_{CONFIG.OS}_{CONFIG.ARCH}.zip"
    provider_download=remote_file(
        name = f"_{name}_download",
        url = url,
        hashes = hashes,
    )
    provider=genrule(
        name = name,
        srcs = [provider_download],
        tools=[TERRAFORM_PLZ_TOOL],
        # We extract the binary into a directory here 
        # to preserve the filename which is usually
        # terraform-provider-aws_v2.70.0_x4
        cmd = f"""
$TOOLS provider_build \\
    --provider_path="$SRCS" \\
    --out="$OUTS" \\
    --registry="{registry}" \\
    --namespace="{namespace}" \\
    --provider_name="{provider_name}" \\
    --version="{version}" \\
    --os="{CONFIG.OS}" \\
    --arch="{CONFIG.ARCH}"
""",
        outs = [name],
        visibility = visibility,
    )


def terraform_module(
    name: str,
    srcs: list = None,
    url: str = None,
    strip: list = [],
    hashes: list = [],
    deps: list = [],
    licences: list = [],
    labels: list = [],
    visibility: list = [],
):
    """Build rule for obtaining a remote Terraform Module or defining a local Terraform module.
    Args:
        name: The name of the build rule.
        srcs: The source Terraform files for the Terraform module.
        url: The url to download and extract the Terraform module from.
        strip: The files/directories to strip from the module.
        hashes: The hashes to verify the downloaded archive against.
        deps: The modules that this module depends on.
        licences: The licences associated with the module.
        labels: The additonal labels to add to the build rule.
        visibility: The targets to make the toolchain visible to.
    """
    module_srcs_dir=None
    if url:
        module_srcs_dir=remote_file(
            name = f"_{name}#download",
            url = url,
            hashes = hashes,
            licences = licences,
            extract = True,
        )
    else:
        module_srcs_dir=genrule(
            name = f"_{name}#srcs",
            srcs = srcs,
            outs = [f"_{name}#srcs"],
            # flatten the module as srcs in other directories should be other modules
            cmd = "mkdir $OUTS && for src in $SRCS; do cp $src $OUTS/; done",
        )

    deps=[canonicalise(dep) for dep in deps]
    deps_csv_array = _to_csv_array([f"$(location {dep})" for dep in deps])

    strip_csv_array = _to_csv_array(strip)

    genrule(
        name = name,
        srcs = [module_srcs_dir],
        outs = [name],
        exported_deps=deps,
        deps=deps,
        visibility=visibility,
        tools=[TERRAFORM_PLZ_TOOL],
        cmd = f"""
$TOOLS module_build \\
    --pkg="$PKG" \\
    --name="$NAME" \\
    --module-dir="$SRCS" \\
    --out="$OUTS" \\
    --url="{url}" \\
    --strip="{strip_csv_array}" \\
    --deps="{deps_csv_array}"    
        """,
    )

def terraform_root(
    name: str,
    srcs: list,
    var_files: list = [],
    modules: list = [],
    providers: list = [],
    toolchain: str = None,
    labels: list = [],
    visibility: list = [],
    add_default_workflows: bool = True,
):
    """Build rule for running Terraform against Terraform configuration.
    Args:
        name: The name of the build rule.
        srcs: The source Terraform files for the root module.
        vars: The Terraform var files passed into the root module.
        modules: The Terraform modules that the srcs use.
        providers: The Terraform providers that the srcs use.
        toolchain: The Terraform toolchain to use with against the srcs.
        labels: The additonal labels to add to the build rule.
        visibility: The targets to make the toolchain visible to.
        add_default_workflows: Whether or not to include the default Terraform workflows as Please targets (_plan, _apply, _destroy, _validate).
    """
    # build a Terraform root workspace
    srcs_csv = _to_csv_array([f"$(location {src})" for src in srcs])
    var_files_csv = _to_csv_array([f"$(location {var_file})" for var_file in var_files])
    modules=[canonicalise(module) for module in modules]
    modules_csv_array = _to_csv_array([f"$(location {module})" for module in modules])

    root=genrule(
        name = f"_{name}",
        outs = [f"_{name}"],
        tools = [TERRAFORM_PLZ_TOOL],
        srcs = srcs + var_files + modules,
        cmd = f"""
$TOOLS root_build \\
    --pkg="$PKG" \\
    --name="{name}" \\
    --os="{CONFIG.OS}" \\
    --arch="{CONFIG.ARCH}" \\
    --out="$OUTS" \\
    --pkg-dir="$PKG_DIR" \\
    --srcs="{srcs_csv}" \\
    --var_files="{var_files_csv}" \\
    --modules="{modules_csv_array}"
        """,
    )

    # determine the terraform binary to use
    toolchain = toolchain or TERRAFORM_DEFAULT_TOOLCHAIN
    providers_csv_array = _to_csv_array([f"$(out_location {provider})" for provider in providers])

    terraform_workspace = sh_cmd(
        name = name,
        shell = "/usr/bin/env bash",
        cmd = f"""
# Source the workspace (virtual environment) for running Terraform commands.
eval "\\\$( $(out_location {TERRAFORM_PLZ_TOOL}) root_workspace \\
    --terraform-binary="$(out_exe {toolchain})" \\
    --os="$OS" \\
    --arch="$ARCH" \\
    --root-module="$(out_location {root})" \\
    --provider-paths="{providers_csv_array}"
)" 
    

# Run the provided commands, if any.
eval "set -x; \\\$@"
        """,
        data = [root, toolchain, TERRAFORM_PLZ_TOOL] + providers,
        labels = [f"terraform_workspace"] + labels,
        visibility = visibility,
    )

    if add_default_workflows:
        default_workflows = {
            "plan": "terraform init && terraform plan",
            "apply": "terraform init && terraform apply",
            "destroy": "terraform init && terraform destroy",
            "validate": "terraform init -backend=false && terraform validate",
        }

        for workflow in default_workflows.keys():
            cmd = default_workflows[workflow]

            sh_cmd(
                name = f"{name}_{workflow}",
                shell = "/usr/bin/env bash",
                data = [terraform_workspace],
                cmd = f"$(out_exe {terraform_workspace}) \"{cmd} \\\$@\"",
                labels = [f"terraform_{workflow}"],
            )

    return terraform_workspace

def _to_csv_array(items:list):
    return ",".join(items)
